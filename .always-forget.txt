# .always-forget.txt


# MacOS leak checking.
MallocStackLogging=1 leaks -quiet -atExit -- ./TODO.exe


# Latex.
# Subfigures.
\begin{figure}[h]
    \centering
    \begin{subfigure}{.3\textwidth}
        \centering
        \includegraphics[width=\linewidth]{TODO:IMG_NAME}
        \caption*{TODO}
    \end{subfigure}%
    \begin{subfigure}{.3\textwidth}
        \centering
        \includegraphics[width=\linewidth]{TODO:IMG_NAME}
        \caption*{TODO}
    \end{subfigure}%
    \begin{subfigure}{.3\textwidth}
        \centering
        \includegraphics[width=\linewidth]{TODO:IMG_NAME}
        \caption*{TODO}
    \end{subfigure}
\end{figure}

# Multiple columns.
\usepackage{multicol}
\begin{multicols*}{n}
  # keep writing normally and the text will be divided into
  # n columns automatically
  \columnbreak  # force a new column
\end{multicols*}

# Itemize spacing.
\begin{itemize}
  \setlength{\itemsep}{0em}
\end{itemize}

# or equivalently
\begin{itemize}[itemsep=0em]
\end{itemize}

# Auto-sized parentheses. Also work for square brackets.
\left(
\right)
# Auto-sized curly braces - escape braces.
\left\{
\left\}

# Different columns in the same table.
# The first row will have two columns with the latter three merged into one.
\begin{tabular}[h]{|c|c|c|c|}
  \hline
  first & \multicolumn{3}{c|}{combined} \\
  \hline
  first & second & third & fourth \\
  \hline
\end{tabular}

# Algorithms.
\begin{algorithm}[H]
\begin{algorithmic}[1]
        \Function{Find-Ind-Set}{$G = (V, E)$}
        \State{$S \gets \varnothing$}
        \For{$v\in V$}
        \State{Randomly sample a random real $r_v\in[0,1]$}
        \EndFor{}
        \State{$S \gets S \cup \set{v}$}
        \EndIf{}
        \EndFor{}
        \State{\Return{S}}
        \EndFunction{}
\end{algorithmic}
\end{algorithm}

# A clickable table of contents.
\usepackage[hidelinks]{hyperref}        # hidelinks hides the default red
                                        # border around each clickable link
\begin{document}
...
\tableofcontents
...
\end{document}

# Set a local region with line spacing being x.
\begin{spacing}{x}
...
\end{spacing}


# xmake
xmake project -k compile_commands       # create compile_commands.json for
                                        # language servers such as clangd


# Python.
pip freeze > requirements.txt  # dump packages installed to requirements.txt
# Run subprocess and print output.
result = subprocess.run(
       ["ls", "-a"], capture_output=True, text=True, check=True
)
print(result.stdout)
# Disable pylint warnings.
# pylint: disable=warning-name  # next to a code block
# --disable=warning-name        # when calling pylint
pip install --upgrade pip             # update pip
pip install --upgrade -r requirements.txt
                                      # update packages in requirements.txt


# npm
npm install                               # install/update packages in package.json
npm audit fix                             # automatically fix vulnerabilities


# JavaScript.
# Disable eslint warnings.
/* eslint-disable warning-name  */        # at the top of a file
// eslint-disable-next-line warning-name  # for next line


# Linux commands.
tree -I "dir1|dir2|dir3|..."          # ignore multiple directories
ps -ax | ag [keyword]                 # list processes and seach for keyword
find /parent/dir/ -name "<filename>"  # search for a file with <filename>
                                      # under /parent/dir/. <filename> can
                                      # contain wildcards.
grep [-r] <keyword> <dir>             # search for <keyword> in all files under
                                      # the current directory. [-r] allows for
                                      # search in subdirectories as well.
bear -- make                          # generate compile_commands.json out of
                                      # a Makefile.
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..  # generate compile_commands.json
                                             # with cmake
df -h                                 # generate a high-level overview of file
                                      # system usage; useful to check the usage
                                      # percentage of each partition
du -h [root-directory]                # generate the size of each file/subdirectory
                                      # recursively under [root-directory], which
                                      # is by default the current directory (.)
du -h --max-depth=n [root-directory]  # same thing as above with a limit on the
                                      # recursive depth. n being 1 is perhaps
                                      # the most useful, which is an overview of
                                      # [root-directory] (. by default)
du -sh [root-directory]               # generate the size of [root-directory]
                                      # itself (-s meaning summary) (. by default)
ping -c 4 8.8.8.8                     # ping Google DNS server to check connectivity
sudo -l                               # check if current user has sudo access
su [username]                         # switch to another user [username] and to root
                                      # if [username] is not provided
chmod <mode> <filename>               # change the mode of <filename> to <mode>
                                      # mode: owner-group-others
                                      # 4: read, 2: write, 1: execute
chown [-R] <username> <filename>      # change the owner of <filename>
                                      # to <username> [recursively]
chgrp <group> <filename>              # change the group of <filename> to <group>
lsof -i -P | ag/grep LISTEN           # list the ports in use
caffeinate -d -t 3600                 # (MacOS) prevent the display (-d) from
                                      # sleeping for 3600 seconds
sudo usermod -aG <group> ${USER}      # add current user to <group> / join
                                      # <group> as the current user
newgrp <group>                        # start a new shell with <group> being the
                                      # current effective group
groups                                # list all groups the current user is in
id -gn                                # print the effective group (-g) name (-n)
sudo ufw status verbose               # list all firewall rules
sudo ufw allow <port>                 # allow traffic to a port
sudo ufw reload                       # reload the firewall to update its
                                      # configuration
sudo ufw status numbered              # list all firewall rules with their
                                      # corresponding numbers
sudo ufw delete <number>              # remove an entry from the table by its number
top                                   # list current processes sorted by CPU usage
                                      # press M: sort by memory usage
                                      # press P: sort by CPU usage
                                      # press q: quit
netstat -lntu                         # list all listenting (-l) ports and their
                                      # associated services
                                      # -n: port number
                                      # -tu: TCP and UDP
brew install <package>                # install a package with homebrew
brew search <package>                 # search for a package in homebrew
brew info <package>                   # show descriptions of a homebrew package
brew update                           # update homebrew itself
brew upgrade <package>                # update a package installed via homebrew
brew list                             # list all packages installed via homebrew


# The Silver Searcher.
ag  # show help message
ag --ignore-dir dir1 --ignore-dir dir2 <content>  # ignore multiple directories
ag -A 10 "keyword"   # search for "keyword" and show 10 lines after result
ag -B 10 "keyword"   # search for "keyword" and show 10 lines before result
ag -C 10 "keyword"   # search for "keyword" and show 10 lines before and after
                     # result (C for context)


# Common Emacs commands.
C-x C-s    # save buffer
C-x C-c    # kill current Emacs process
C-a        # go to the beginning of current line
C-e        # go to the end of current line
C-x C-;    # comment/uncomment current line
C-x C-f    # find a file to open
C-x C-b    # find a buffer to open
C-x C-u    # convert selected text to upper case
C-s        # search a word
C-r        # back-search a word
C-g        # abort current operation
C-x 2      # split the current window horizontally
C-x 3      # split the current window vertically
C-x 0      # close the window the cursor is in
C-x 1      # close all other split windows except the one the cursor is in
C-x 5 2    # open current buffer in a new window
C-x 5 0    # close a window opened by the previous command
C-x 8 RET  # switch to Unicode input mode
C-x space  # rectangle selection
C-@        # region selection
C-x h      # select everything inside current buffer
C-c n      # toggle directory tree view with neotree
C-c C-c    # change (enter) directory in neotree
C-w        # cut
C-k        # cut current line after the cursor
C-y        # paste
M-w        # copy
M-f        # move forward a word
M-b        # move backward a word
M-}        # move forward a paragraph
M-{        # move backward a paragraph
M->        # go to end of current buffer
M-<        # go to beginning of current buffer
M-/        # autocomplete
M-x        # command prompt
M-.        # go to definition
M-g g [n]  # go to line n
C-x 8 ' a  # type Spanish character á
C-x 8 ~ n  # type Spanish character ñ
C-x 8 " u  # type Spanish character ü
C-x 8 RET 00BF    # type inverted question mark ¿
C-x r             # (M-x revert-buffer) reload the buffer from file
M-x eval-buffer   # evaluate the Lisp expressions in the current buffer
M-:               # shortcut for M-x eval
C-x C-q           # toggle read-only mode for the current buffer
C-u M-!           # execute a shell command, e.g. date, and write the output
s-l g g           # go to definition (s is the super key mapped to option)

## Common M-x prompts (autocomplete with TAB)
term                    # open the built-in terminal
beginning-of-buffer     # go to the beginning of the buffer
end-of-buffer           # go to the end of the buffer
kill-buffer             # kill current buffer (not window)
ispell-buffer           # spell check the current buffer
ispell-region           # spell check the selected region

## Org mode.
C-c C-c                 # add a tag
*bold*
/italic/
=inline code=
+strikethrough+

C-c C-, s RET           # generate the following source code block
#+BEGIN_SRC [language]
A code snippet that can be run with C-c C-c
#+END_SRC

src_<language>{an inline code snippet}

[[link][title]]         # e.g. [[https://google.com][Google]] the link can be a url
                        # to a website or a local path that contains an image
C-c C-o                 # click on the link
C-c C-d                 # deadline date
C-c C-s                 # scheduled date
C-x m                   # compose an email
C-c C-c                 # send the email
shift-left/right        # change the style of a list
M-left/right            # indent a subheading
M-up/down               # reorder items in a list (also works for subheadings)


# Common Vim commands.
h/j/k/l    # left/down/up/right
H/M/L      # move to the top/middle/bottom of the screen
e/b        # move forward/backward a word
0/$        # move to the start/end of a line
gg/G       # move to the beginning/end of the file
[n]gg      # move to line n
{/}        # move upward/downward a paragraph
zz         # focus the cursor on the middle of the window
H          # focus the cursor on the top (High) of the window
L          # focus the cursor on the bottom (Low) of the window
/<keyword> # search for <keyword>
n          # go to the next occurrence AFTER a search
N          # go to the previous occurrence AFTER a search
u          # undo previous action
C-r        # redo previous action

i/a        # insert before/after the cursor
I/A        # move to the start/end of a line AND enter insert mode
Ctrl + w   # delete word before the cursor
Ctrl + j   # add a line break at the cursor position
cc         # delete line
dd         # cut line
C-y        # select the current autocompletion suggestion
C-n        # go to next autocompletion suggestion
C-p        # go to previous autocompletion suggestion

v          # enter visual mode for region selection
y          # copy selected text
c          $ cut selected text
p          # paste the clipboard after cursor
P          # paste the clipboard before cursor


# Git commands.
git reset <filename>            # remove a file from the added list
git branch -d <branch-name>     # delete a local branch
git branch -D <branch-name>     # force delete a local branch
git restore <filename>          # restore (remove) changes in a file
git diff [filename]             # view detailed changes in unstaged files
git diff --staged [filename]    # view detailed changes in staged but not
                                # yet committed files
git revert <commit-hash>        # revert a commit
git remote remove <origin>      # remove remote "origin"


# AWS Linux commands.
sudo systemctl start <service-name>     # start a service
sudo systemctl stop <service-name>      # stop a service
sudo systemctl restart <service-name>   # restart a service
sudo systemctl reload <service-name>    # restart a service (no down time)
sudo systemctl status <service-name>    # check service status
sudo journalctl -xe                     # view detailed logs
# After changes are made to service config files under /etc/systemd/system/,
# reload daemon and restart the service(s) the changes correspond to.
sudo systemctl daemon-reload
sudo systemctl restart <service-name>

# Renew a certificate
sudo certbot certificates               # show certificates information
sudo certbot renew
sudo systemctl reload nginx             # optional, but verify that the
                                        # certificate is indeed successfully
                                        # renewed
                                        # (https://www.ssllabs.com/ssltest/)


# LLDB commands.
settings set stop-line-count-before <n>  # show n line before the current line
settings set stop-line-count-after <n>   # show n line after the current line
process launch -- <arg1> <arg2> ...      # start the debugger with arguments
fr/frame v                               # list all variables currently in scope


# GDB commands.
set args <arg1> <arg2> ...              # set input arguments


# Docker
docker ps [-a]                          # list [all] existing Docker containers
docker images                           # list all built Docker images
docker logs <container-id-or-name>      # print container stdout and stderr
docker-compose -f <path-to-docker-compose-yml> build
                                        # build a Docker image with docker-compose
docker-compose -f <path-to-docker-compose-yml> up [-d]
                                        # run a Docker image out of a docker-compose
                                        # file (-f) [in the background (-d)]
docker stop <container-id-or-name>      # stop a container based on id/name
sudo docker-compose -f <path-to-docker-compose-yml> down [--rmi all --volumes]
                                        # stop a container with docker-compose
                                        # and optionally remove used images and
                                        # volumes
docker exec -it <container-id-or-name> /bin/bash
                                        # open a bash terminal in the container
cat <password-file> | docker login --username <uname> --password-stdin
                                        # log into Docker at command-line
docker volume ls                        # list all Docker volumes
docker rm <container-id-or-name>        # remove a Docker container
docker rmi <image-id-or-name>           # remove a Docker image
docker volume rm <volume-name>          # remove a Docker volume
sudo docker system prune -af            # remove all (-a) unused Docker objects
                                        # without asking for password (-f)
docker network ls                       # list all Docker networks
docker inspect <container/image/volume/network>
                                        # inspect a container/image/volume/network


# MongoDB
mongosh                                 # open a MongoDB shell. If MongoDB is run in
                                        # a Docker container, run the command after
                                        # opening a container terminal.
show dbs                                # show all databases
use <db-name>                           # use a specific DB
show collections                        # show all collections in a specific DB
db.<collection-name>.find()             # find all documents in a collection


# SSH
ssh-keygen -t ed25519 -C "<email>"      # generate a SSH public key
cat ~/.ssh/id_ed25519.pub               # show the generated SSH public key


# CMake
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)   # placed in the ROOT CMakeLists.txt to
                                        # generate compile_commands.json
add_executable(exeName src1 src2 ...)   # generate an executable named exeName
                                        # with source files src1, src2, etc.
add_library(libName STATIC/SHARED/MODULE/INTERFACE src1 src2 ...)
                                        # generate a library named libName with
                                        # souce files src1, src2, etc.
target_include_directories(target PUBLIC/PRIVATE/INTERFACE dir1 dir2 ...)
                                        # add directories dir1, dir2, etc. for
                                        # include files for target. A target can
                                        # be either an executable for a library.
target_link_libraries(target PUBLIC/PRIVATE/INTERFACE lib1 lib2 ...)
                                        # link libraries lib1, lib2, etc. to target
